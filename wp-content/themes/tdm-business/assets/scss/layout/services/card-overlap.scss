
/* Card */
.card {
    max-width: 1300px;
    height: 500px;
    overflow: visible;
    border-radius: 1rem;
    position: relative; 
    margin: 90px auto 0px;
}

  .card > div {
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 1rem;
    box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.5);
    will-change: transform, opacity;
  }
  
  .card-title {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate3d(-50%, -50%, 0);
  }
  img {
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 1rem;
    object-fit: cover;
  }

  .arrow:hover {
    color: #06e;
    transform: translateY(-50%) scale(1.1);
  }
  
  .arrow[disabled] {
    opacity: 0.25;
    cursor: unset;
  }
  
  /* Card transitions */
  .card {
    --duration: 1s;
    --perspective: 1000px;
    --rotateX: 0deg;
    --rotateY: -60deg;
    --rotateZ: 0deg;
    --translateX: 100%;
  
  
    --resetToZero: rotateX(0deg) rotateY(0deg) rotateZ(0deg) translateX(0);
    --reverseRotateX: calc(0deg - var(--rotateX));
    --reverseRotateY: calc(0deg - var(--rotateY));
    --reverseRotateZ: calc(0deg - var(--rotateZ));
    --reverseTranslateX: calc(0% - var(--translateX));
  
    perspective: var(--perspective);
    transform-style: preserve-3d;
  }
  
  .card > div {
    animation: var(--animName) var(--duration) forwards ease-out;
  }
  
  .card > :last-child {
    opacity: 0;
  }
  
  .-js-card-left > :first-child {
    --animName: offToLeft;
  }
  .-js-card-left > :last-child {
    --animName: onFromRight;
  }
  .-js-card-right > :first-child {
    --animName: offToRight;
  }
  .-js-card-right > :last-child {
    --animName: onFromLeft;
  }

  .controls {
    max-width: 1370px;
    margin: auto;
    display: flex;
    justify-content: space-between;
    transform: translate(0, -280px);

    .overlap-arrow {
        width: 70px;
        height:70px;
        border-radius: 100%;
        border: none;
        font-size: 24px;
        color: #b453c4;
        font-weight: bold;
    }
  }
  
  @keyframes onFromLeft {
    0% {
      opacity: 0;
      transform:
        rotateX(var(--rotateX))
        rotateY(var(--rotateY))
        rotateZ(var(--rotateZ))
        translateX(var(--reverseTranslateX));
    }
    75% {
      opacity: 1;
    }
    100% {
      opacity: 1;
      transform: var(--resetToZero);
    }
  }
  @keyframes offToLeft {
    0% {
      opacity: 1;
      transform: var(--resetToZero);
    }
    25% {
      opacity: 1;
    }
    100% {
      opacity: 0;
      transform:
        rotateX(var(--rotateX))
        rotateY(var(--rotateY))
        rotateZ(var(--rotateZ))
        translateX(var(--reverseTranslateX));
    }
  }
  @keyframes onFromRight {
    0% {
      opacity: 0;
      transform:
        rotateX(var(--reverseRotateX))
        rotateY(var(--reverseRotateY))
        rotateZ(var(--reverseRotateZ))
        translateX(var(--translateX));
    }
    75% {
      opacity: 1;
    }
    100% {
      opacity: 1;
      transform: var(--resetToZero);
    }
  }
  @keyframes offToRight {
    0% {
      opacity: 1;
      transform: var(--resetToZero);
    }
    25% {
      opacity: 1;
    }
    100% {
      opacity: 0;
      transform:
        rotateX(var(--reverseRotateX))
        rotateY(var(--reverseRotateY))
        rotateZ(var(--reverseRotateZ))
        translateX(var(--translateX));
    }
  }